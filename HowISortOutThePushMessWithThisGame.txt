The problem:
I was indiscriminately checking in files in Not Another FPS, in the hope that the .gitignore default file from GitHub contains sufficient exclusion settings for a lean Unity game check-in. Unfortunately the .gitignore file does not filter out binary files in ShaderCache, Artifacts, i.e anything under the Library subdirectory. There are numerous big binary files (dlls, bins) that I won't probably need to share now. I am not expecting someone to clone my project and build it. Otherwise they will need my plugins. Commit file size becomes a problem, because GitHub limits the file size to 100MB. I have not found it yet, but somehow there is one file that exceeds this size. This file now prevents me from pushing my last commit. Lets call this the 'bad commit'. At the same time, I figured out what to do on the .gitignore file to tell Git to not track the dlls and bins. Git apparently has this all-or-nothing push philosophy, unlike Perforce that allows individual changelist check-ins. Git has a FIFO default sequence for pushing commits. Because the bad commit is older than my gitignore correction commint, now my .gitignore commit gets blocked by this bad commit. To make matter worse, the bad commit also changes the same .gitignore. Now I need to resolve a file, and I don't have a tool for this. Yes I can use P4Merge, but I really don't need to. I need to revert this bad commit (changelist). [Then I spent 1 hour fuming about 'this will never happen in Perforce', then studied some Perforce hosting options. Found an AWS Perforce cloud hosting solution that I will pursue, if it is not too expensive. Otherwise Assembla]. To fix my problems, my solution options are: rebase commit, revert commit, or reset commit. Not too many, thank goodness.

I tried following the commit rebase and reorder methods described in StackExchange. I got lost because I really have no picture about Git's commit system. Rebase doc is so foreign to me at this point. Plus I really am convinced that nobody should ever need to do this. Then again, nobody should get into my trouble if Git allows independent commit push.

Revert commit is not what I need. This action creates another commit changelist gated by the problematic commit with the large file. Then I am back to the rebase and reorder method to change the commit sequence for repo pushing, but I did not get that far. I think the solution to the problem is unnecessarily complicated due to Git's rigid push all or nothing approach. Perforce allows individual changelist submission from multiple active changelist. No Git UI tool so far allows me to drag and drop commits to reorder the push sequence or priority. I tried GitKraken, and I got lost. So I pursued the reset option, which carries a big warning.

Git reset can be --soft, where the command cancels the commit and restate the files back into checked-out state. Does not solve my problem because the big file is buried somewhere in the 12k+ checked-out files. --hard will cancel the commit and thrash the changes. As if the changes never existed. This is Perforce's equivalent of reverting an active changelist. I just have to be aware that I will lose all changes, which is what revert should do. Also, I need to do this from the command line (hate typing commands). GitHub Desktop is not powerful enough to let the user do this from the UI. GitKraken may have this feature, but the terminology is just foreign to me. So here is my solution:
1. Clone Not Another FPS folder. This preserves the changes.
2. From the command line, issue git reset --hard <SHA number before the bad changelist>. So revert everything locally.
3. Resubmit the new .gitignore file. Tell Git to not manage the big binaries.
4. Delete the current Not Another FPS folder.
5. Restore Not Another FPS folder using the cloned folder.
6. Now GitHub Desktop's active changelist contains only files that I want to track in the repo.
7. Submit this changelist.
8. Finally, follow the advice from https://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/ to untrack the binary files from the repo. Now I see some similarity between Git and Perforce. What a learning pain!

Now I have a clean repo with only the files I want to track. My local repo still have these binaries, including the fbx. I preserved my .cs and .prefab change history. All clear!